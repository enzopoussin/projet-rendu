from random import randint, shuffle  #importation du module random
from copy import copy, deepcopy #importation du module copy
from utilitary import * #importation des différentes variables pour le jeux

def copy_boar_model(board_model: list)->list:
    '''
    This function create a recursive copy of board_model
    :param board_model:
    :return:
    '''
    board = deepcopy(board_model)   #creation d'une copie
    return board

def display_bord(board: list):
    '''
    This function display the board
    :param board: list
    :return:
    '''
    for ligne in board:  #parcours de la liste de liste pour afficher le tableau
        for colonne in ligne:
            print(colonne, end=" ") #affichage du tableau
        print()


def generate_code(color: list)->list:
    '''
    This function generate a code 
    :param color: list
    :return code: list
    '''
    code = []                             #liste vide pour y mettre le code
    for i in range(4):                      #boucle pour ajouter la lettre généré aléatoirement dans la liste
        choice_color = randint(0,3)
        code.append(color[choice_color])
    return code

def valid_code(code: list, color: list)->bool:
    '''
    This function checks if the code is valid
    :param code: list
    :param color: list
    :return: bool
    '''
    count = 0                      #initialisation d'un compteur
    for lettre in code:       #boucle pour vérifier que la lettre est possible
        if lettre in color:
            count += 1
        else:
            pass    #si la couleur n'est pas possible on passe
    if count == 4 :  #si le compteur vaut 4 le code est valide sinon il n'est pas valide
        return True
    else:
        return False

def verify_code(code_player: str, code: list)->str:
    '''
    This function checks if the player's code matches the code generated by the computer.
    It will set up the G or M indicators depending on the well-placed and misplaced letters.
    :param code_player: str
    :param code: list
    :return result: str
    '''
    code_player2 = copy(list(code_player))   #je fais une copie de code_player pour pouvoir le modifier
    code2 = copy(code)   #je fais une copie de code pour pouvoir le modifier
    count =  0           #initialisation de 2 compteurs
    count2 = 0
    result = []       #initialisation d'une liste vide
    for letter in code:                                  #boucle qui va regarder si la lettre est bien placée
        if letter == code_player[count]:
            result.append("G")      #insertion de la lettre G dans la liste
            code_player2[count] = "."       # les 2 lignes vont remplacer par "." ou " " les lettres traitées
            code2[count] = " "
        count += 1     # + 1 au compteur
    for letter in code_player2:           #boucle qui va regarder les lettres qui sont mal placées
        if letter == ".":
            pass
        elif letter in code2:              #si la lettre est dans le code on insert M dans le result
            result.append("M")
            code_player2[count2] = "."   #on remplace la lettre par un "."
        else:
            result.append(".")         #sinon on ajoute "." dans le result
            code_player2[count2] = "."   # on remplace la lettre de code_player2 par "."
        count2 += 1    # + 1 au compteur

    shuffle(result)     #mélange le result
    return ''.join(result)    #transforme le result en str



def place_in_board(board: list,player_code: str,count_ligne: int)->None:
    '''
    This function places the player's code in the game board
    :param board: list
    :param player_code: str
    :param count_ligne: int
    :return: None
    '''
    index_code = 0        #initialisation d'un compteur
    for i in range(3,7):  #boucle qui va parcourir dans le tableau de jeu pour placer les lettres
        if board[count_ligne][i] == '.':
            board[count_ligne][i] = player_code[index_code]  #placement de la lettre dans le tableau de jeu
        index_code += 1  # + 1 au compteur

def place_in_board_indicators(board: list,player_code: str,code: list,count_ligne: int,indicators: str)->None:
    '''
    this function places the indicators in the game board
    :param board: list
    :param player_code: str
    :param code: list
    :param count_ligne: int
    :param indicators: str
    :return: None
    '''
    index_code = 0   #initialisation d'un compteur
    for i in range(0,2): #boucle pour ajouter les indicateurs sur la partie gauche
        if board[count_ligne][i] == ".":
            board[count_ligne][i] = indicators[index_code]
        index_code += 1
    for i in range(8,10):  #boucle pour ajouter les indicateurs sur la partie droite
        if board[count_ligne][i] == ".":
            board[count_ligne][i] = indicators[index_code] #place indicators dans le plateau de jeu
        index_code +=1

def choice_board(choice_difficulty: str)->list:
    '''
    This function returns the game table according to the chosen difficulty
    :param choice_difficulty: str
    :return: list
    '''
    if choice_difficulty == '1':  #cas où le joueur prend le niveau facile
        return board_model_easy
    elif choice_difficulty == '2': #cas où le joueur prend le niveau moyen
        return board_model_medium
    else:                          #cas où le joueur prend le niveau dur
        return board_model_hard

def the_end(choice_difficulty: str)->int:
    '''
    This function returns the number of trials based on the chosen level
    :param choice_difficulty: str
    :return: int
    '''
    if choice_difficulty == '1':   #cas où le joueur prend le niveau facile
        return 12
    elif choice_difficulty == '2': #cas où le joueur prend le niveau moyen
        return 8
    else:                          #cas ou le joueur prend le niveay dur
        return 5